@page "/administrar/torneos"
@inject DataServiceTorneo dataServiceTorneo
@inject IToastService toast

<h3>Administrar Torneos</h3>


    @if (!modoEditor)
    {
        @if (torneos == null)
        {
            <p>Cargando...</p>
        }
        else
        {
        <div class="containerAddJugador table-wrapper-scroll-y my-custom-scrollbar">
            <table class="blueTable">
                <tr style="align-content:center">
                    <td></td>
                    <td>Nombre Torneo</td>
                    <td>Desde</td>
                    <td>Hasta</td>
                    <td>Deporte</td>
                    <td>Cantidad inscriptos</td>
                    <td>Puntaje Max</td>
                    <td>Puntaje Max último set</td>
                    <td>Sets Max</td>
                    <td></td>
                </tr>
               

                    @if (torneos.Count == 0)
                    {
                        <p>No hay torneos con el nombre especificado</p>
                    }
                    else
                    {
                        @foreach (var torneo in torneos)
                        {
                        <tr>
                            <td><img src="@ActualizarLinkImagen(torneo.ImagenRef)" alt="" class="imagenEnListada"></td>
                            <td>@torneo.Nombre</td>
                            <td>@torneo.Desde.ToString("dd/MM/yyyy")</td>
                            <td>@torneo.Hasta.ToString("dd/MM/yyyy")</td>
                            <td>@torneo.Deporte</td>
                            <td>@torneo.Inscripciones.Count</td>
                            <td>@torneo.PuntajeMax</td>
                            <td>@torneo.PuntajeMaxDefinitorio</td>
                            <td>@torneo.SetsMax</td>
                            <td><button class="buttonStyle" @onclick="() => SeleccionarTorneo(torneo.Id)">Administrar</button></td>
                        </tr>
                        }
                    }
            </table>
                
        </div>
    }
}
else
{
    @if (torneoSeleccionado.Fixture == null || torneoSeleccionado.Fixture.Count == 0)
    {
        <button class="buttonStyle" @onclick="() => AutomatizarFixture()">Crear Fixture automático</button>
    }
        <button class="buttonStyle" >Crear grupo de marcadores de partido</button>

        <EspacioHorizontal Altura="25px" />

        @if (torneoSeleccionado != null && torneoSeleccionado.Fixture.Count > 0)
        {
            @foreach (var partido in torneoSeleccionado.Fixture)
            {
            <PartidoMarcador Partido="partido" 
                             PuntajeMax="torneoSeleccionado.PuntajeMax" 
                             SetsMax="torneoSeleccionado.SetsMax"
                             PuntajeMaxDefinitorio="torneoSeleccionado.PuntajeMaxDefinitorio"
                             SiguientePartidoParaEquipoGanador="ClasificaGanador"/>
            }
        }
        else
        {
          <p>No hay Fixture creado</p>
        }
    }
   


@code {

    private string nombreTorneo = "";
    private List<ViewModelTorneo> torneos = null;
    private bool modoEditor = false;
    private ViewModelTorneo torneoSeleccionado = null;

    protected async override Task OnInitializedAsync()
    {
        await GetTorneos();
    }

    private async Task GetTorneos()
    {
        torneos = await dataServiceTorneo.GetTorneosVigentes();
        StateHasChanged();
    }

    private string ActualizarLinkImagen(string imagenRef)
    {
        return $"https://torneostorage.blob.core.windows.net/imagenesequipos/{imagenRef}";

    }

    private async Task AutomatizarFixture()
    {
        try
        {
            torneoSeleccionado.Fixture = dataServiceTorneo.CrearFixtureAut(torneoSeleccionado);
            ViewModelFixture viewModelFixture = new()
                {
                    TorneoId = torneoSeleccionado.Id,
                    Fixture = torneoSeleccionado.Fixture
                };

            bool resultado = await dataServiceTorneo.GuardarFixtureCompleto(viewModelFixture);
            toast.ShowSuccess("Fixture guardado exitosamente");
        }
        catch (Exception ex)
        {
            toast.ShowWarning(ex.Message); 
        }


    }

    void CambioEditor() => modoEditor = !modoEditor;

    void SeleccionarTorneo(int idTorneo)
    {
        torneoSeleccionado = torneos.SingleOrDefault(s => s.Id == idTorneo);
        CambioEditor();
    }

    async Task ClasificaGanador(ViewModelEquipoGanador viewModelEquipoGanador)
    {
        try
        {
            var partidoSiguiente = torneoSeleccionado.Fixture.SingleOrDefault(s => s.Guid == viewModelEquipoGanador.GuidPartidoSiguiente);

            if (partidoSiguiente != null)
            {
                if (partidoSiguiente.Local == null)
                {
                    partidoSiguiente.Local = viewModelEquipoGanador.EquipoGanador;
                }
                else if (partidoSiguiente.Visitante == null)
                {
                    partidoSiguiente.Visitante = viewModelEquipoGanador.EquipoGanador;
                }
            }
            await dataServiceTorneo.ActualizarPartido(partidoSiguiente);

            toast.ShowSuccess("Siguiente partido actualizado");
        }
        catch (Exception ex)
        {
            toast.ShowWarning(ex.Message);
        }
       
    }
   

}
