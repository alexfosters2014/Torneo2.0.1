@page "/administrar/torneos"
@inject DataServiceTorneo dataServiceTorneo

<h3>Administrar Torneos</h3>


    @if (!modoEditor)
    {
        @if (torneos == null)
        {
            <p>Cargando...</p>
        }
        else
        {
     <div class="containerAddJugador">
            <table class="blueTable">
                <tr style="align-content:center">
                    <td></td>
                    <td>Nombre Torneo</td>
                    <td>Desde</td>
                    <td>Hasta</td>
                    <td>Deporte</td>
                    <td>Cantidad inscriptos</td>
                    <td>Puntaje Max</td>
                    <td>Sets Max</td>
                    <td></td>
                </tr>
                <tr>

                    @if (torneos.Count == 0)
                    {
                        <p>No hay torneos con el nombre especificado</p>
                    }
                    else
                    {
                        @foreach (var torneo in torneos)
                        {
                            <td><img src="@ActualizarLinkImagen(torneo.ImagenRef)" alt="" class="imagenEnListada"></td>
                            <td>@torneo.Nombre</td>
                            <td>@torneo.Desde.ToString("dd/MM/yyyy")</td>
                            <td>@torneo.Hasta.ToString("dd/MM/yyyy")</td>
                            <td>@torneo.Deporte</td>
                            <td>@torneo.Inscripciones.Count</td>
                            <td>@torneo.PuntajeMax</td>
                            <td>@torneo.SetsMax</td>
                            <td><button class="buttonStyle" @onclick="() => SeleccionarTorneo(torneo.Id)">Administrar</button></td>
                        }
                    }

                </tr>
            </table>
                
        </div>
        }
    }
    else
    {
        <button class="buttonStyle" @onclick="() => AutomatizarFixture()">Crear Fixture automático</button>
        <button class="buttonStyle" >Crear grupo de marcadores de partido</button>

        @if (torneoSeleccionado != null && torneoSeleccionado.Fixture.Count > 0)
        {
            @foreach (var partido in torneoSeleccionado.Fixture)
            {
            <PartidoMarcador Partido="partido" 
                             PuntajeMax="torneoSeleccionado.PuntajeMax" 
                             SetsMax="torneoSeleccionado.SetsMax" />
            }
        }
        else
        {
          <p>No hay torneo seleccionado</p>
        }
    }
   


@code {

    private string nombreTorneo = "";
    private List<ViewModelTorneo> torneos = null;
    private bool modoEditor = false;
    private ViewModelTorneo torneoSeleccionado = null;

    protected async override Task OnInitializedAsync()
    {
        await GetTorneos();
    }

    private async Task GetTorneos()
    {
        torneos = await dataServiceTorneo.GetTorneosVigentes();
        StateHasChanged();
    }

    private string ActualizarLinkImagen(string imagenRef)
    {
        return $"https://torneostorage.blob.core.windows.net/imagenesequipos/{imagenRef}";

    }

    private async Task AutomatizarFixture()
    {
        torneoSeleccionado.Fixture = dataServiceTorneo.CrearFixtureAut(torneoSeleccionado);
        //torneoSeleccionado.Fixture = torneoSeleccionado.Fixture.OrderBy(o => o.Ronda).ToList();
        //falta guardar el fixture en la base de datos

    }

    void CambioEditor() => modoEditor = !modoEditor;

    void SeleccionarTorneo(int idTorneo)
    {
        torneoSeleccionado = torneos.SingleOrDefault(s => s.Id == idTorneo);
        CambioEditor();
    }


}
