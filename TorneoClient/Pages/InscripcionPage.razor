@page "/inscripcion"

@inject DataServiceInscripcion dataServiceInscripcion;
@inject DataServiceEquipo dataServiceEquipo;
@inject IToastService toast;


<div class="cardInscripcion">
    
    <table class="">
        <tr>
            <td style="color:dimgrey">Selecciona tu equipo:</td>
            <td style="color:darkred">@equipo.NombreEquipo</td>
            <td><button @onclick="ShowBuscadorEquipo" class="buttonStyle">Buscar</button></td>
        </tr>
        <tr>
            <td style="color:dimgrey">Selecciona el torneo</td>
            <td colspan="2">
                <select @onchange="CambioTorneo" style="color:darkred">
                               <option value="0" selected>Seleccionar un torneo</option>
                            @foreach (var torneo in torneosParaInscripcion)
                            {
                               <option value="@torneo.Id">@torneo.Nombre</option>
                            }
                    </select>
            </td>
        </tr>
    </table>

</div>

<div class="flexCenterBox">
    <button class="buttonStyle" @onclick="Inscribir">Inscribir mi equipo</button>

</div>


@code {

    [CascadingParameter] IModalService Modal { get; set; } = default!;

    List<ViewModelTorneo> torneosParaInscripcion = new();

    ViewModelTorneo torneo = new();
    Equipo equipo =new();


    private async Task ShowBuscadorEquipo()
    {

        var buscadorEquipoModal = Modal.Show<BuscadorEquipoInscripcion>();

        var result = await buscadorEquipoModal.Result;

        if (result.Confirmed)
        {
            equipo = (Equipo)result.Data;
            await ActualizarListaTorneos(equipo.Deporte);
        }
    }

    private async Task ActualizarListaTorneos(string deporte)
    {
        try
        {
            torneosParaInscripcion = await dataServiceInscripcion.GetTorneosSegunDeporte(deporte);
            // StateHasChanged();
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }

    }

    void CambioTorneo(ChangeEventArgs e)
    {
        int torneoSeleccionadoId = Int32.Parse(e.Value.ToString());

        torneo = torneosParaInscripcion.SingleOrDefault(s => s.Id == torneoSeleccionadoId);
    }

    private async Task Inscribir()
    {
        try
        {
            if (torneo  != null & equipo != null)
            {
                ViewModelInscripcion vw = new()
                    {
                        TorneoId = torneo.Id,
                        NombreTorneo = torneo.Nombre,
                        EquipoAInscribir = equipo
            };

            string resultado = await dataServiceInscripcion.NuevaInscripcionATorneo(vw);
                toast.ShowSuccess(resultado);
            }
            else
            {
                toast.ShowInfo("Falta Seleccionar algunos items");
            }
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

}

